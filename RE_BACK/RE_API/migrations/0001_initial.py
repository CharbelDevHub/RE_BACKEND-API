# Generated by Django 4.2.11 on 2024-04-04 19:29

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullName', models.CharField(blank=True, max_length=100, null=True)),
                ('arFullName', models.CharField(blank=True, max_length=100, null=True)),
                ('shortName', models.CharField(blank=True, max_length=50, null=True)),
                ('licenseCode', models.CharField(blank=True, max_length=5, null=True)),
                ('logo', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'Agency',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'City',
            },
        ),
        migrations.CreateModel(
            name='CompanyMessages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('senderName', models.CharField(blank=True, max_length=100, null=True)),
                ('senderEmail', models.CharField(blank=True, max_length=100, null=True)),
                ('messageSubject', models.CharField(blank=True, max_length=100, null=True)),
                ('message', models.TextField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'CompanyMessages',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issueDate', models.DateField()),
                ('startDate', models.DateField()),
                ('endDate', models.DateField()),
                ('paymentAmount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('depositAmount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('numOfInvoices', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'Country',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paymentTypeDesc', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'PaymentType',
            },
        ),
        migrations.CreateModel(
            name='PropertyStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('propertyStatusDesc', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'PropertyStatus',
            },
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('propertyTypeDesc', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'PropertyType',
            },
        ),
        migrations.CreateModel(
            name='RequestStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reqStts', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'RequestStatus',
            },
        ),
        migrations.CreateModel(
            name='RequestType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reqType', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'RequestType',
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specializationDesc', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'Specialization',
            },
        ),
        migrations.CreateModel(
            name='TransactionStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transactionStatusDesc', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'TransactionStatus',
            },
        ),
        migrations.CreateModel(
            name='TransactionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transactionTypeDesc', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'TransactionType',
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userTypeDesc', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'UserType',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('middleName', models.CharField(blank=True, max_length=30)),
                ('brokerCode', models.CharField(blank=True, max_length=5, null=True)),
                ('phoneNumberCode', models.CharField(blank=True, max_length=100, null=True)),
                ('phoneNumber', models.CharField(blank=True, default=None, max_length=30, null=True)),
                ('profilePicture', models.CharField(blank=True, max_length=255, null=True)),
                ('profileImage', models.ImageField(blank=True, default='Logo.jpg', null=True, upload_to='uploads/users/')),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='RE_API.agency')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('specialization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='RE_API.specialization')),
                ('userType', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='RE_API.usertype')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transactionDate', models.DateField()),
                ('broker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.contract')),
                ('transactionStatus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.transactionstatus')),
                ('transactionType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.transactiontype')),
            ],
            options={
                'db_table': 'Transaction',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issuedOn', models.DateTimeField(default=datetime.datetime(2024, 4, 4, 19, 29, 46, 80443, tzinfo=datetime.timezone.utc))),
                ('broker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='broker_req', to=settings.AUTH_USER_MODEL)),
                ('reqStatus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.requeststatus')),
                ('reqType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.requesttype')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_req', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Request',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('propertyName', models.CharField(max_length=50)),
                ('propertyLandArea', models.DecimalField(decimal_places=2, max_digits=15, max_length=20)),
                ('numOfBedrooms', models.IntegerField(default=0)),
                ('numOfBathrooms', models.IntegerField(default=0)),
                ('numOfParkingLots', models.IntegerField(default=0)),
                ('numOfGarages', models.IntegerField(default=0)),
                ('propertyImage', models.CharField(default=0, max_length=2000)),
                ('propertyDescription', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.city')),
                ('propertyStatus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.propertystatus')),
                ('propertyType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.propertytype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Property',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paymentAmount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('paymentDate', models.DateField()),
                ('paymentType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RE_API.paymenttype')),
            ],
            options={
                'db_table': 'Payment',
            },
        ),
        migrations.AddField(
            model_name='contract',
            name='buyer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_contracts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contract',
            name='contractParent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_contracts', to='RE_API.contract'),
        ),
        migrations.AddField(
            model_name='contract',
            name='property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_contracts', to='RE_API.property'),
        ),
        migrations.AddField(
            model_name='contract',
            name='seller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_contracts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('website', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('phoneNumber', models.CharField(blank=True, max_length=10, null=True)),
                ('logo', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='RE_API.city')),
            ],
            options={
                'db_table': 'Company',
            },
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='RE_API.country'),
        ),
        migrations.AddField(
            model_name='agency',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='RE_API.city'),
        ),
    ]
